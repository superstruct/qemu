# QEMU WebAssembly Quick Build Workflow
# Copyright (c) 2025 Superstruct Ltd, New Zealand
# Licensed under the same license as the underlying QEMU project (GNU GPL v2)

name: QEMU WASM Quick Build

on:
  workflow_dispatch:
    inputs:
      target_type:
        description: 'Build target'
        required: true
        default: 'utilities'
        type: choice
        options:
          - utilities
          - system-emulators
          - both
      skip_cache:
        description: 'Skip dependency cache'
        required: false
        default: false
        type: boolean

env:
  EMSCRIPTEN_VERSION: "4.0.14"
  
jobs:
  quick-build:
    name: Quick WASM Build
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout QEMU
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Python  
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build pkg-config curl
        pip3 install meson==1.5.0

    - name: Setup Emscripten
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install ${{ env.EMSCRIPTEN_VERSION }}
        ./emsdk activate ${{ env.EMSCRIPTEN_VERSION }}
        
    - name: Cache WASM Dependencies
      if: github.event.inputs.skip_cache != 'true'
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: wasm-deps/target
        key: wasm-deps-quick-${{ hashFiles('wasm-deps/cross.meson') }}
        
    - name: Build Dependencies (if needed)
      if: steps.cache-deps.outputs.cache-hit != 'true' || github.event.inputs.skip_cache == 'true'
      run: |
        source emsdk/emsdk_env.sh
        export TARGET="$PWD/wasm-deps/target" 
        export PKG_CONFIG_LIBDIR="$TARGET/lib/pkgconfig"
        
        mkdir -p "$TARGET"/{lib,include} wasm-deps/build
        cd wasm-deps/build
        
        # Quick dependency builds (minimal variants)
        curl -O https://www.zlib.net/zlib-1.3.1.tar.gz && tar xf zlib-1.3.1.tar.gz
        cd zlib-1.3.1 && emconfigure ./configure --static --prefix="$TARGET" && emmake make install && cd ..
        
        curl -O https://github.com/libffi/libffi/releases/download/v3.4.7/libffi-3.4.7.tar.gz && tar xf libffi-3.4.7.tar.gz  
        cd libffi-3.4.7 && emconfigure ./configure --host=wasm32-unknown-linux --enable-static --disable-shared --prefix="$TARGET" && emmake make install && cd ..
        
        curl -O https://cairographics.org/releases/pixman-0.44.2.tar.gz && tar xf pixman-0.44.2.tar.gz
        cd pixman-0.44.2 && meson setup build --cross-file=../../cross.meson --prefix="$TARGET" && ninja -C build install && cd ..
        
        # Stub libresolv
        mkdir -p stub && echo '#include <netdb.h>' > stub/res_query.c 
        echo 'int res_query(const char *n, int c, int t, unsigned char *d, int l) { h_errno = HOST_NOT_FOUND; return -1; }' >> stub/res_query.c
        emar rcs "$TARGET/lib/libresolv.a" stub/res_query.c
        
        # Quick glib build
        curl -O https://download.gnome.org/sources/glib/2.84/glib-2.84.0.tar.xz && tar xf glib-2.84.0.tar.xz
        cd glib-2.84.0
        sed -i '/HAVE_POSIX_SPAWN/d' meson.build && sed -i '/HAVE_PTHREAD_GETNAME_NP/d' meson.build
        meson setup build --cross-file=../../cross.meson --prefix="$TARGET" && ninja -C build install
        cd ../../../
        
    - name: Build QEMU Utilities
      if: github.event.inputs.target_type == 'utilities' || github.event.inputs.target_type == 'both'
      run: |
        source emsdk/emsdk_env.sh
        export TARGET="$PWD/wasm-deps/target"
        export PKG_CONFIG_LIBDIR="$TARGET/lib/pkgconfig"
        
        mkdir -p build-utilities && cd build-utilities
        ../configure --cc=emcc --cxx=em++ --ar=emar --ranlib=emranlib \
          --with-coroutine=wasm --enable-tcg-interpreter \
          --disable-system --disable-user --enable-tools \
          --disable-kvm --disable-vnc --disable-gtk --disable-sdl --disable-curl --disable-libssh
        ninja qemu-img qemu-io qemu-nbd qemu-edid
        
    - name: Build QEMU System Emulators  
      if: github.event.inputs.target_type == 'system-emulators' || github.event.inputs.target_type == 'both'
      run: |
        source emsdk/emsdk_env.sh
        export TARGET="$PWD/wasm-deps/target"
        export PKG_CONFIG_LIBDIR="$TARGET/lib/pkgconfig"
        
        mkdir -p build-system && cd build-system
        ../configure --cc=emcc --cxx=em++ --ar=emar --ranlib=emranlib \
          --with-coroutine=wasm --enable-tcg-interpreter \
          --disable-user --disable-tools --enable-system --target-list=i386-softmmu,arm-softmmu \
          --disable-kvm --disable-vnc --disable-gtk --disable-sdl --disable-curl --disable-libssh --disable-png
        ninja qemu-system-i386 qemu-system-arm
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-wasm-quick-${{ github.event.inputs.target_type }}-${{ github.run_number }}
        path: |
          build-utilities/*.js
          build-utilities/*.wasm
          build-system/*.js  
          build-system/*.wasm
        retention-days: 7